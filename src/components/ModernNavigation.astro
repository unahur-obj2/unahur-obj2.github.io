---
import { DarkMode } from 'accessible-astro-components'
import { Image } from 'astro:assets'
import logo from '../assets/img/Obj2Logo.png'
import { PATH } from '@/paths.js'

const menuIcon = `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/></svg>`
const closeIcon = `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/></svg>`
---

<nav
	class="modern-navigation sticky top-0 z-50 border-b border-gray-200 bg-white/95 backdrop-blur-md transition-all duration-300 dark:border-gray-700 dark:bg-gray-900/95">
	<div class="container mx-auto px-4">
		<div class="flex h-16 items-center justify-between">
			<a
				href={PATH}
				class="logo-container text-decoration-none flex items-center gap-3 transition-transform duration-200 hover:scale-105">
				<div class="relative">
					<Image
						src={logo}
						alt="Objetos II Logo"
						width="47"
						height="37"
						class="logo-image rounded-lg shadow-sm"
					/>
				</div>
				<div class="flex flex-col">
					<span class="text-lg font-bold text-gray-900 dark:text-white"
						>Objetos II</span
					>
					<span
						class="text-xs font-medium text-unahur-primary dark:text-unahur-accent"
						>UNAHUR</span
					>
				</div>
			</a>

			<div class="hidden items-center space-x-8 lg:flex">
				<nav aria-label="Navegación principal">
					<ul class="flex items-center space-x-6">
						<slot />
					</ul>
				</nav>

				<div
					class="flex items-center space-x-4 border-l border-gray-200 pl-6 dark:border-gray-700">
					<DarkMode />
				</div>
			</div>

			<div class="flex items-center space-x-2 lg:hidden">
				<DarkMode />
				<button
					id="mobile-menu-toggle"
					class="rounded-lg p-2 text-gray-600 transition-colors duration-200 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800"
					aria-label="Abrir menú de navegación"
					aria-expanded="false">
					<span
						id="menu-icon"
						set:html={menuIcon}
					/>
					<span
						id="close-icon"
						class="hidden"
						set:html={closeIcon}
					/>
				</button>
			</div>
		</div>

		<div
			id="mobile-menu"
			class="max-h-0 overflow-hidden opacity-0 transition-all duration-300 lg:hidden">
			<div class="border-t border-gray-200 py-4 dark:border-gray-700">
				<nav aria-label="Navegación móvil">
					<ul class="space-y-2">
						<slot name="mobile" />
					</ul>
				</nav>
			</div>
		</div>
	</div>
</nav>

<script is:inline>
	;(function () {
		const savedTheme = localStorage.getItem('theme') || 'light'
		const html = document.documentElement
		const body = document.body

		if (savedTheme === 'dark') {
			html.classList.add('darkmode')
			body.classList.add('darkmode')
			html.setAttribute('data-theme', 'dark')
		} else {
			html.classList.remove('darkmode', 'dark')
			body.classList.remove('darkmode', 'dark')
			html.setAttribute('data-theme', 'light')
		}
	})()
</script>

<script>
	document.addEventListener('astro:page-load', () => {
		const navigation = document.querySelector('.modern-navigation')
		const mobileMenuToggle = document.getElementById('mobile-menu-toggle')
		const mobileMenu = document.getElementById('mobile-menu')
		const menuIcon = document.getElementById('menu-icon')
		const closeIcon = document.getElementById('close-icon')

		const setActiveMenuItem = () => {
			const currentPathname = window.location.pathname
			const menuLinks = navigation?.querySelectorAll('a:not([rel*="external"])')

			menuLinks?.forEach((link) => {
				const htmlLink = link as HTMLAnchorElement
				htmlLink.classList.remove('is-active')
				htmlLink.removeAttribute('aria-current')

				if (
					(currentPathname.includes(htmlLink.pathname.replaceAll('/', '')) &&
						htmlLink.textContent !== 'Inicio') ||
					(htmlLink.textContent === 'Inicio' && currentPathname === '/')
				) {
					htmlLink.classList.add('is-active')
					htmlLink.setAttribute('aria-current', 'page')
				}
			})
		}

		const toggleMobileMenu = () => {
			const isOpen = mobileMenuToggle?.getAttribute('aria-expanded') === 'true'

			if (isOpen) {
				mobileMenuToggle.setAttribute('aria-expanded', 'false')
				mobileMenu?.classList.remove('max-h-96', 'opacity-100')
				mobileMenu?.classList.add('max-h-0', 'opacity-0')
				menuIcon?.classList.remove('hidden')
				closeIcon?.classList.add('hidden')
			} else {
				mobileMenuToggle?.setAttribute('aria-expanded', 'true')
				mobileMenu?.classList.remove('max-h-0', 'opacity-0')
				mobileMenu?.classList.add('max-h-96', 'opacity-100')
				menuIcon?.classList.add('hidden')
				closeIcon?.classList.remove('hidden')
			}
		}

		mobileMenuToggle?.addEventListener('click', toggleMobileMenu)

		const mobileLinks = mobileMenu?.querySelectorAll('a')
		mobileLinks?.forEach((link) => {
			link.addEventListener('click', () => {
				toggleMobileMenu()
			})
		})

		window.addEventListener('resize', () => {
			if (window.innerWidth >= 1024) {
				mobileMenuToggle?.setAttribute('aria-expanded', 'false')
				mobileMenu?.classList.remove('max-h-96', 'opacity-100')
				mobileMenu?.classList.add('max-h-0', 'opacity-0')
				menuIcon?.classList.remove('hidden')
				closeIcon?.classList.add('hidden')
			}
		})

		const applyTheme = (theme) => {
			const html = document.documentElement
			const body = document.body
			const darkModeButtons = document.querySelectorAll(
				'.darkmode-toggle, .accessible-astro-components button'
			)

			if (theme === 'dark') {
				html.classList.add('darkmode')
				body.classList.add('darkmode')
				html.setAttribute('data-theme', 'dark')
				darkModeButtons.forEach((button) =>
					button.setAttribute('aria-pressed', 'true')
				)
			} else {
				html.classList.remove('darkmode', 'dark')
				body.classList.remove('darkmode', 'dark')
				html.setAttribute('data-theme', 'light')
				darkModeButtons.forEach((button) =>
					button.setAttribute('aria-pressed', 'false')
				)
			}
		}

		const savedTheme = localStorage.getItem('theme') || 'light'
		applyTheme(savedTheme)

		window.addEventListener('storage', (e) => {
			if (e.key === 'theme' && e.newValue) {
				console.log('Theme changed in another tab:', e.newValue)
				applyTheme(e.newValue)
			}
		})

		document.addEventListener('visibilitychange', () => {
			if (!document.hidden) {
				const currentTheme = localStorage.getItem('theme') || 'light'
				console.log('Page became visible, applying theme:', currentTheme)
				applyTheme(currentTheme)
			}
		})

		setTimeout(() => {
			const darkModeButtons = document.querySelectorAll(
				'.darkmode-toggle, .accessible-astro-components button'
			)

			darkModeButtons.forEach((button) => {
				console.log('Found dark mode button:', button)

				const toggleTheme = () => {
					const html = document.documentElement
					const isDark =
						html.classList.contains('darkmode') ||
						html.classList.contains('dark')

					const newTheme = isDark ? 'light' : 'dark'
					console.log('Toggling theme to:', newTheme)

					localStorage.setItem('theme', newTheme)
					applyTheme(newTheme)

					window.dispatchEvent(
						new StorageEvent('storage', {
							key: 'theme',
							newValue: newTheme,
							oldValue: isDark ? 'dark' : 'light',
						})
					)
				}

				const touchHandler = function (e) {
					e.preventDefault()
					e.stopPropagation()
					console.log('Touch event on dark mode button')
					toggleTheme()
				}

				const clickHandler = function (e) {
					e.preventDefault()
					e.stopPropagation()
					console.log('Click event on dark mode button')
					toggleTheme()
				}

				button.addEventListener('touchstart', touchHandler, { passive: false })
				button.addEventListener('click', clickHandler, { passive: false })
			})
		}, 500)

		let lastScrollY = window.scrollY
		window.addEventListener('scroll', () => {
			const currentScrollY = window.scrollY

			if (currentScrollY > lastScrollY && currentScrollY > 100) {
				navigation?.classList.add('-translate-y-full')
			} else {
				navigation?.classList.remove('-translate-y-full')
			}

			lastScrollY = currentScrollY
		})

		setActiveMenuItem()
	})
</script>

<style>
	.modern-navigation {
		transition: transform 0.3s ease-in-out;
	}

	:global(.modern-navigation .is-active) {
		@apply relative font-semibold text-unahur-primary;
	}

	:global(.modern-navigation .is-active::after) {
		content: '';
		position: absolute;
		bottom: -8px;
		left: 50%;
		transform: translateX(-50%);
		width: 100%;
		height: 2px;
		@apply bg-gradient-to-r from-unahur-primary to-unahur-secondary;
		border-radius: 1px;
	}

	:global(.modern-navigation nav a) {
		@apply rounded-lg px-3 py-2 font-medium text-gray-700 transition-colors duration-200 hover:bg-gray-100 hover:text-unahur-primary dark:text-gray-200 dark:hover:bg-gray-800 dark:hover:text-unahur-accent;
		text-decoration: none;
	}

	:global(.modern-navigation #mobile-menu nav a) {
		@apply block rounded-lg px-4 py-3 text-gray-700 transition-all duration-200 hover:bg-unahur-light hover:text-unahur-primary dark:text-gray-200 dark:hover:bg-gray-800 dark:hover:text-unahur-accent;
	}

	#mobile-menu {
		transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;
	}

	@media (max-width: 1023px) {
		.container {
			padding-left: 1rem;
			padding-right: 1rem;
		}

		:global(.modern-navigation .darkmode-toggle) {
			border: none !important;
			outline: none !important;
			box-shadow: none !important;
			background: transparent !important;
			padding: 8px !important;
			border-radius: 8px;
			min-height: 44px;
			min-width: 44px;
			touch-action: manipulation;
			-webkit-tap-highlight-color: transparent;
			appearance: none !important;
			-webkit-appearance: none !important;
		}

		:global(.modern-navigation .darkmode-toggle:focus) {
			border: none !important;
			outline: none !important;
			box-shadow: none !important;
		}

		:global(.modern-navigation .darkmode-toggle:active) {
			border: none !important;
			outline: none !important;
			box-shadow: none !important;
			background-color: rgba(0, 0, 0, 0.1) !important;
		}

		:global(.modern-navigation .darkmode-toggle svg) {
			width: 20px !important;
			height: 20px !important;
			color: #6b7280 !important;
		}

		:global(.darkmode .modern-navigation .darkmode-toggle svg) {
			color: #d1d5db !important;
		}

		:global(.modern-navigation .accessible-astro-components button) {
			border: none !important;
			outline: none !important;
			box-shadow: none !important;
			background: transparent !important;
			padding: 8px !important;
			border-radius: 8px;
			min-height: 44px;
			min-width: 44px;
			touch-action: manipulation;
			-webkit-tap-highlight-color: transparent;
			appearance: none !important;
			-webkit-appearance: none !important;
		}

		:global(.darkmode-toggle),
		:global(button.darkmode-toggle),
		:global(.accessible-astro-components button),
		:global(.modern-navigation button[aria-label*='Dark']),
		:global(.modern-navigation button[aria-label*='Light']) {
			border: 0 !important;
			border-width: 0 !important;
			border-style: none !important;
			border-color: transparent !important;
			outline: 0 !important;
			outline-width: 0 !important;
			outline-style: none !important;
			outline-color: transparent !important;
			box-shadow: none !important;
			-webkit-box-shadow: none !important;
			-moz-box-shadow: none !important;
			background: transparent !important;
			background-color: transparent !important;
			background-image: none !important;
		}

		:global(.darkmode-toggle:focus),
		:global(button.darkmode-toggle:focus),
		:global(.accessible-astro-components button:focus),
		:global(.modern-navigation button[aria-label*='Dark']:focus),
		:global(.modern-navigation button[aria-label*='Light']:focus) {
			border: 0 !important;
			outline: 0 !important;
			box-shadow: none !important;
		}

		:global(.darkmode-toggle:active),
		:global(button.darkmode-toggle:active),
		:global(.accessible-astro-components button:active),
		:global(.modern-navigation button[aria-label*='Dark']:active),
		:global(.modern-navigation button[aria-label*='Light']:active) {
			border: 0 !important;
			outline: 0 !important;
			box-shadow: none !important;
		}
	}

	:global(.modern-navigation .logo-image) {
		filter: none !important;
		mix-blend-mode: normal !important;
		opacity: 1 !important;
		animation: none !important;
		transform: none !important;
	}

	:global(.modern-navigation .logo-image:hover) {
		filter: none !important;
	}
</style>
